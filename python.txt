The seminal way to teach new developers to code is a new programming language is to have them create a simple Hello World program.

The requirements couldn't be simpler - simply print out the text "Hello World" on a single line.

Python developers proud of their language's brevity and conciseness are quick to show off their language's implementaiton of 'Hello World' which looks exactly like this:

print("Hello World")

Unfortunately, that's a big Python fail, because that line of code doesn't actually print out Hello World. Instead, it prints out:

Hello World\n

You might not see the extra \n character in a terminal window, but if you looked at the unicode the print statement generates, you'd see it there. 

And if you looked at the implementation of Python's print method, you'd see that this newline sequence is always added.

The problem is more pronounced if you write Hello World with two print calls like this:

print("Hello")  //output is Hello\n
print("World")  //output is Hello\n

This displays out:

Hello
World

How to fix the problem?

To fix the problem of Python needlessly adding extra characters to the output, you can take one of two approaches.

The first is to import sys and print directly to the output stream:

import sys
sys.stdout.write("Hello World")   

Many people are surprised to see the need to import the System object in Python, as in most other like Java this System object is accessible by default. This just one example of how Python is a much more verbose language compared to Java, Rust or JavaScript.

The second option is to override the unwanted behavior of the print method and write the print statements like this:

print('Hello, world!', end="", flush=False)

Both approaches create a bit of a dog's breakfast, but they are a necessity for a Python program to meet the simple requirements demand by the seminal 'Hello World' program.

By the way, we are not done yet with the Python HelloWorld program. As it is, the program implements a few very dangerous anti-patterns and opens up a variety of security holes. So any responsible teacher would not allow a Python program written with such dangerous anti-patterns embedded in it stand without addressing these issues with students, but before we get to that, let's compare Python's Hello World to Java

In Java, the prototypical Hello World is implemented in one line:

System.out.print("Hello World")

While the creators of Python take a dicatotiral view of how methods and properties should be used, Java does not.
Java does not demand that every print statement end with a newline character like Python does. While Python treats developers like simpletons who need their hands held in order to do a print statement correctly, Java let's developers code their programs any way they like.

The print method in Java does not append a new line character to the end of a print statement.

However, if you do want to automatically append a new line character, Java offers a println statement as well.

This approach to the print method in Java really shows the contrast between how Python works and how Java works.

Many peole slag Java for being verbose, and they point to the System.out.println method as a prime example.

Java is expressive. Python is not.

In Python's print method, it is not clear where the print method goes.

Does it print to a printer?
Does it print to a log file?
Does it display in a Windows dialog box?
Does it print to a terminal window?

Where does Python's print mehthod print to?

It is this constant push in Python to hide important details that makes learning the language difficult.
When new learners are asked where the print statement goes to, they are told that it's assumed they should know. It's not a nice way to introduce new developers to the language.

On the other hand, Java's expressiveness makes what is happening completely clear.

Want to print to the System's default output stream? Use System.out.print. What is happening is all clearly described in the code.

Furthermore, if you want to only print to the console window and not pollute log files at runtime, Java has a simple way to do that:

System.console.print

How can this be done in Python?

It's not actually clear from the API, as there's no simple method call like there is in Java.

You'd likely have to import sys again and make a few calls into the components in that package, which would be multiple lines of code.

Or perhaps you could override Python's print method again and continue to expand on the number of parameters that get passed to it.

IN JAVA WINDOWS COMPONENT

Something that is a simple, single line of code in Java quickly becomes a verbose, indimidating, indecipherable sequence of characters in Python.

Now anyone that understands Python programming knows that it's a huge anti-pattern to leave top level code inside a script file.

If this code was ever turned into a module and imported by another Python program, all the code written in the file would be executed.

That's not only a huge security hole, but it can also cause massive performance problems if resources like database connections are opened or files on the local hard drive are accessed. As such, no 'Hello World' introduction to Python is complete without including the boilerplate code required to protect the learner from learning serious programming anti-pattersn up front.

To address this, all code in a Python script should be put into a method that is invoked with the following boilerplate code:

if __name__ == "__main__":

When completed, the code looks as follows:

def main():
   print('Hello, world!', end="", flush=False)

if __name__ == "__main__":
   main()


An industry wide programming standard is to also pass command line arguments to the main method, so to keep the Hello World example in line with languages like C and C++, the final result would be:

import sys

def main(argv):
   print('Hello, world!', end="", flush=False)

if __name__ == "__main__":
   main(sys.argv)

And that is what a simple, Hello World program in Python that compiles with industry standards and avoids teaching new learners deleteriously bad programming practices.

In comparison, Hello World in Java remains one line of code:

System.out.print("Hello World")

The designers of the Java language were well aware of the dangers of allowing the execution of top level code on the importation of a script file, and placed appropriate firewalls in the language that stop this from happening. So Java does not require the same cryptic, intimidating, boilerplate code Python needs to be safe to run.

So far, the Java code we have seen runs inside JShell, Java's scripting environment.

Many Python developers object to a direct comparison between Java's REPL scripting environment and Python's REPL scripting environment, arguing that such an apples to apples comparision is unfair. Given how overwhelmingly easier Java is to write a Hello World program than Python is, their objections are understandable.

Python developers prefer they Python scripting environment be compared instead to either Java applets that were deprected in 2011 or standalone Java programs that serve a different purpose than a REPL program. An unfair comparison certainly favors the Python community who dislike the conclusions that stem from an apples to apple comparison, but even when we compare a standalone Java program to a Python REPL program, Java comes out ahead.

To create a Java application that does now allow top level scripts to run dangerously and unexpectedly on import, while also complying with industry standards like being able to access environment variables, the Java code would look like this:

public class Hello World {
  public static void main(String args[]){
    System.out.print("Hello World");
  }
}

In Java, no import statements are required, there are no cryptic if statements with peculiarly named variables like __name__ and __main__, and the code complies with accepted industry standards. 

The code is familiar and approachable. While Python developers with years and years of experience still have no idea what Python's if __main__ = __name__ boilerplate does, any Java, C, C++ or Rust developer understands the purpose of the main method.

Python is a very powerful language, but it is cryptic, it's syntax is esoteric, and the desire by the language designers to implement functionality they then developer need when in fact they really don't makes Python more confusing and difficult to learn than other popular programming languages.

In comparison to Python, Java code is much more readable, signifianctly more expressive and far less verbose, all of which makes it easier to learn and more pleasurable to code with.

It should be noted that both languages are great languages. Python has made a splash in Data Science, while Java is dominant in mobile, IoT, enterprise development, microservices, database driven applications and high-performance computing where threads must scale across multiple cores. (Python doesn't have this ability.)

You really can't go wrong programming with either language.


   




This is an example of Java being more expressive than Python






Java, a less verbose and more expressive language doesn't have this problem, as it 


